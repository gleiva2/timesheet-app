{"ast":null,"code":"import { getInstance } from \"./index\";\nexport const authGuard = (to, from, next) => {\n  const authService = getInstance();\n\n  const fn = () => {\n    // If the user is authenticated, continue with the route\n    if (authService.isAuthenticated) {\n      return next();\n    } // Otherwise, log in\n\n\n    authService.loginWithRedirect({\n      appState: {\n        targetUrl: to.fullPath\n      }\n    });\n  }; // If loading has already finished, check our auth state using `fn()`\n\n\n  if (!authService.loading) {\n    return fn();\n  } // Watch for the loading property to change before we check isAuthenticated\n\n\n  authService.$watch(\"loading\", loading => {\n    if (loading === false) {\n      return fn();\n    }\n  });\n};","map":{"version":3,"sources":["/home/gerson/Documents/node-tutorials/timesheet-app/client/src/auth/authGuard.js"],"names":["getInstance","authGuard","to","from","next","authService","fn","isAuthenticated","loginWithRedirect","appState","targetUrl","fullPath","loading","$watch"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,KAAoB;AAC3C,QAAMC,WAAW,GAAGL,WAAW,EAA/B;;AACF,QAAMM,EAAE,GAAG,MAAM;AACb;AACA,QAAID,WAAW,CAACE,eAAhB,EAAiC;AAC/B,aAAOH,IAAI,EAAX;AACD,KAJY,CAKjB;;;AACIC,IAAAA,WAAW,CAACG,iBAAZ,CAA8B;AAAEC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,SAAS,EAAER,EAAE,CAACS;AAAhB;AAAZ,KAA9B;AACD,GAPH,CAF6C,CAU7C;;;AACE,MAAI,CAACN,WAAW,CAACO,OAAjB,EAA0B;AACxB,WAAON,EAAE,EAAT;AACD,GAb0C,CAc7C;;;AACED,EAAAA,WAAW,CAACQ,MAAZ,CAAmB,SAAnB,EAA8BD,OAAO,IAAI;AACvC,QAAIA,OAAO,KAAK,KAAhB,EAAuB;AACrB,aAAON,EAAE,EAAT;AACD;AACF,GAJD;AAKD,CApBM","sourcesContent":["import { getInstance } from \"./index\";\nexport const authGuard = (to, from, next) => {\n  const authService = getInstance();\nconst fn = () => {\n    // If the user is authenticated, continue with the route\n    if (authService.isAuthenticated) {\n      return next();\n    }\n// Otherwise, log in\n    authService.loginWithRedirect({ appState: { targetUrl: to.fullPath } });\n  };\n// If loading has already finished, check our auth state using `fn()`\n  if (!authService.loading) {\n    return fn();\n  }\n// Watch for the loading property to change before we check isAuthenticated\n  authService.$watch(\"loading\", loading => {\n    if (loading === false) {\n      return fn();\n    }\n  });\n};"]},"metadata":{},"sourceType":"module"}