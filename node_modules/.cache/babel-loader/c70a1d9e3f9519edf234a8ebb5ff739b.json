{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from \"moment\";\nimport axios from \"axios\";\nexport default {\n  data: () => ({\n    baseUrl: \"http://192.168.86.220:3000/timesheet\",\n    monthChange: null,\n    month: \"\",\n    dates: [\"\"],\n    days: {\n      sunday: 0,\n      monday: 0,\n      tuesday: 0,\n      wednesday: 0,\n      thursday: 0,\n      friday: 0,\n      saturday: 0\n    },\n    rate: 100,\n    monthObject: null,\n    ptMonthChange: null,\n    ptMonth: \"\",\n    ptDates: [\"\"],\n    ptDays: {\n      sunday: 0,\n      monday: 0,\n      tuesday: 0,\n      wednesday: 0,\n      thursday: 0,\n      friday: 0,\n      saturday: 0\n    },\n    ptRate: 50,\n    ptMonthObject: null\n  }),\n  watch: {\n    /**\n     * Cleaning Hours month change\n     */\n    monthChange(yearMonth) {\n      this.month = yearMonth;\n      this.getTimesheet(\"reg\", yearMonth);\n    },\n\n    /**\n     * Cleaning Hours PT month change\n     */\n    ptMonthChange(yearMonth) {\n      this.ptMonth = yearMonth;\n      this.getTimesheet(\"pt\", yearMonth);\n    }\n\n  },\n  methods: {\n    getTimesheet(type, month) {\n      axios.get(`${this.baseUrl}/${type}/${month}`).then(res => {\n        if (res.data.length != 0) {\n          if (type === \"reg\") {\n            this.monthObject = res.data[0];\n          } else {\n            this.ptMonthObject = res.data[0];\n          }\n        } else {\n          if (type === \"reg\") {\n            this.dates = [\"\"];\n            this.prepDays();\n            this.monthObject = null;\n          } else {\n            this.ptDates = [\"\"];\n            this.prepPTDays();\n            this.ptMonthObject = null;\n          }\n        }\n\n        if (this.monthObject && type === \"reg\") {\n          this.month = this.monthObject.yearMonth;\n          this.dates = this.monthObject.dates;\n          this.days = this.monthObject.days;\n        }\n\n        if (this.ptMonthObject && type === \"pt\") {\n          this.ptMonth = this.ptMonthObject.yearMonth;\n          this.ptDates = this.ptMonthObject.dates;\n          this.ptDays = this.ptMonthObject.days;\n        }\n      });\n    },\n\n    createTimesheet(type, month) {\n      let dates;\n      let days;\n\n      if (type === \"reg\") {\n        dates = this.dates;\n        days = this.days;\n      } else {\n        dates = this.ptDates;\n        days = this.ptDays;\n      }\n\n      axios.post(this.baseUrl, {\n        name: type,\n        yearMonth: month,\n        dates: dates,\n        days: days\n      }).then(res => {\n        if (type === \"reg\") {\n          this.monthObject = res.data;\n          this.month = this.monthObject.yearMonth;\n          this.dates = this.monthObject.dates;\n          this.days = this.monthObject.days;\n        } else {\n          this.ptMonthObject = res.data;\n          this.ptMonth = this.ptMonthObject.yearMonth;\n          this.ptDates = this.ptMonthObject.dates;\n          this.ptDays = this.ptMonthObject.days;\n        }\n      });\n    },\n\n    updateTimesheet(type, month) {\n      let dates;\n      let days;\n\n      if (type === \"reg\") {\n        dates = this.dates;\n        days = this.days;\n      } else {\n        dates = this.ptDates;\n        days = this.ptDays;\n      }\n\n      axios.patch(`${this.baseUrl}/${type}/${month}`, {\n        name: type,\n        yearMonth: month,\n        dates: dates,\n        days: days\n      }).then(res => {\n        if (type === \"reg\") {\n          this.monthObject = res.data;\n          this.month = this.monthObject.yearMonth;\n          this.dates = this.monthObject.dates;\n          this.days = this.monthObject.days;\n        } else {\n          this.ptMonthObject = res.data;\n          this.ptMonth = this.ptMonthObject.yearMonth;\n          this.ptDates = this.ptMonthObject.dates;\n          this.ptDays = this.ptMonthObject.days;\n        }\n      });\n    },\n\n    /**\n     * Regular days methods\n     */\n    updateDates(dates) {\n      this.prepDays();\n      this.countDays(dates); // if we have data, then call patch\n\n      if (this.monthObject) {\n        this.updateTimesheet(\"reg\", this.month);\n      } else {\n        // if not then post\n        this.createTimesheet(\"reg\", this.month);\n      }\n    },\n\n    prepDays() {\n      this.days = {\n        sunday: 0,\n        monday: 0,\n        tuesday: 0,\n        wednesday: 0,\n        thursday: 0,\n        friday: 0,\n        saturday: 0\n      };\n    },\n\n    countDays(dates) {\n      dates.forEach(date => {\n        if (date != \"\") {\n          let day = moment(date).format(\"dddd\");\n          this.addToDays(day);\n        }\n      });\n    },\n\n    addToDays(day) {\n      switch (day) {\n        case \"Sunday\":\n          this.days.sunday += 1;\n          break;\n\n        case \"Monday\":\n          this.days.monday += 1;\n          break;\n\n        case \"Tuesday\":\n          this.days.tuesday += 1;\n          break;\n\n        case \"Wednesday\":\n          this.days.wednesday += 1;\n          break;\n\n        case \"Thursday\":\n          this.days.thursday += 1;\n          break;\n\n        case \"Friday\":\n          this.days.friday += 1;\n          break;\n\n        case \"Saturday\":\n          this.days.saturday += 1;\n          break;\n\n        default:\n          break;\n      }\n    },\n\n    /**\n     * PT days methods\n     */\n    updatePTDates(dates) {\n      this.prepPTDays();\n      this.countPTDays(dates); // if we have data, then call patch\n\n      if (this.ptMonthObject) {\n        this.updateTimesheet(\"pt\", this.ptMonth);\n      } else {\n        // if not then post\n        this.createTimesheet(\"pt\", this.ptMonth);\n      }\n    },\n\n    prepPTDays() {\n      this.ptDays = {\n        sunday: 0,\n        monday: 0,\n        tuesday: 0,\n        wednesday: 0,\n        thursday: 0,\n        friday: 0,\n        saturday: 0\n      };\n    },\n\n    countPTDays(dates) {\n      dates.forEach(date => {\n        if (date != \"\") {\n          let day = moment(date).format(\"dddd\");\n          this.addToPTDays(day);\n        }\n      });\n    },\n\n    addToPTDays(day) {\n      switch (day) {\n        case \"Sunday\":\n          this.ptDays.sunday += 1;\n          break;\n\n        case \"Monday\":\n          this.ptDays.monday += 1;\n          break;\n\n        case \"Tuesday\":\n          this.ptDays.tuesday += 1;\n          break;\n\n        case \"Wednesday\":\n          this.ptDays.wednesday += 1;\n          break;\n\n        case \"Thursday\":\n          this.ptDays.thursday += 1;\n          break;\n\n        case \"Friday\":\n          this.ptDays.friday += 1;\n          break;\n\n        case \"Saturday\":\n          this.ptDays.saturday += 1;\n          break;\n\n        default:\n          break;\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA;AACA;AAEA;AACAA;AACAC,mDADA;AAGAC,qBAHA;AAIAC,aAJA;AAKAC,eALA;AAMAC;AACAC,eADA;AAEAC,eAFA;AAGAC,gBAHA;AAIAC,kBAJA;AAKAC,iBALA;AAMAC,eANA;AAOAC;AAPA,KANA;AAeAC,aAfA;AAgBAC,qBAhBA;AAkBAC,uBAlBA;AAmBAC,eAnBA;AAoBAC,iBApBA;AAqBAC;AACAZ,eADA;AAEAC,eAFA;AAGAC,gBAHA;AAIAC,kBAJA;AAKAC,iBALA;AAMAC,eANA;AAOAC;AAPA,KArBA;AA8BAO,cA9BA;AA+BAC;AA/BA,IADA;AAkCAC;AACA;AACA;AACA;AACAnB;AACA;AACA;AACA,KAPA;;AAQA;AACA;AACA;AACAa;AACA;AACA;AACA;;AAdA,GAlCA;AAkDAO;AACAC;AACAC;AACA;AACA;AACA;AACA,WAFA,MAEA;AACA;AACA;AACA,SANA,MAMA;AACA;AACA;AACA;AACA;AACA,WAJA,MAIA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,OA5BA;AA6BA,KA/BA;;AAgCAC;AACA;AACA;;AACA;AACArB;AACAC;AACA,OAHA,MAGA;AACAD;AACAC;AACA;;AAEAmB,YACAE,IADA,CACA,YADA,EACA;AACAC,kBADA;AAEAC,wBAFA;AAGAxB,oBAHA;AAIAC;AAJA,OADA,EAOAwB,IAPA,CAOAC;AACA;AACA;AACA;AACA;AACA;AACA,SALA,MAKA;AACA;AACA;AACA;AACA;AACA;AACA,OAnBA;AAoBA,KA/DA;;AAgEAC;AACA;AACA;;AACA;AACA3B;AACAC;AACA,OAHA,MAGA;AACAD;AACAC;AACA;;AAEAmB,YACAQ,KADA,CACA,kCADA,EACA;AACAL,kBADA;AAEAC,wBAFA;AAGAxB,oBAHA;AAIAC;AAJA,OADA,EAOAwB,IAPA,CAOAC;AACA;AACA;AACA;AACA;AACA;AACA,SALA,MAKA;AACA;AACA;AACA;AACA;AACA;AACA,OAnBA;AAoBA,KA/FA;;AAgGA;AACA;AACA;AACAG;AACA;AACA,4BAFA,CAIA;;AACA;AACA;AACA,OAFA,MAEA;AACA;AACA;AACA;AACA,KA9GA;;AA+GAC;AACA;AACA5B,iBADA;AAEAC,iBAFA;AAGAC,kBAHA;AAIAC,oBAJA;AAKAC,mBALA;AAMAC,iBANA;AAOAC;AAPA;AASA,KAzHA;;AA0HAuB;AACA/B;AACA;AACA;AACA;AACA;AACA,OALA;AAMA,KAjIA;;AAkIAgC;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AAvBA;AAyBA,KA5JA;;AA6JA;AACA;AACA;AACAC;AACA;AACA,8BAFA,CAIA;;AACA;AACA;AACA,OAFA,MAEA;AACA;AACA;AACA;AACA,KA3KA;;AA4KAC;AACA;AACAhC,iBADA;AAEAC,iBAFA;AAGAC,kBAHA;AAIAC,oBAJA;AAKAC,mBALA;AAMAC,iBANA;AAOAC;AAPA;AASA,KAtLA;;AAuLA2B;AACAnC;AACA;AACA;AACA;AACA;AACA,OALA;AAMA,KA9LA;;AA+LAoC;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AAvBA;AAyBA;;AAzNA;AAlDA","names":["data","baseUrl","monthChange","month","dates","days","sunday","monday","tuesday","wednesday","thursday","friday","saturday","rate","monthObject","ptMonthChange","ptMonth","ptDates","ptDays","ptRate","ptMonthObject","watch","methods","getTimesheet","axios","createTimesheet","post","name","yearMonth","then","res","updateTimesheet","patch","updateDates","prepDays","countDays","addToDays","updatePTDates","prepPTDays","countPTDays","addToPTDays"],"sourceRoot":"src/components","sources":["CleaningHours.vue"],"sourcesContent":["<template>\n  <v-container>\n    <v-sheet>\n      <v-toolbar dense dark color=\"primary\">\n        <v-toolbar-title> Cleaning Hours </v-toolbar-title>\n      </v-toolbar>\n\n      <v-date-picker\n        v-model=\"dates\"\n        multiple\n        elevation=\"5\"\n        no-title\n        @input=\"updateDates\"\n        :picker-date.sync=\"monthChange\"\n      >\n      </v-date-picker>\n\n      <p v-if=\"days.sunday != 0\">\n        Sunday: {{ days.sunday }} x {{ rate }} = {{ days.sunday * rate }}\n      </p>\n      <p v-if=\"days.monday != 0\">\n        Monday: {{ days.monday }} x {{ rate }} = {{ days.monday * rate }}\n      </p>\n      <p v-if=\"days.tuesday != 0\">\n        Tuesday: {{ days.tuesday }} x {{ rate }} =\n        {{ days.tuesday * rate }}\n      </p>\n      <p v-if=\"days.wednesday != 0\">\n        Wednesday: {{ days.wednesday }} x {{ rate }} =\n        {{ days.wednesday * rate }}\n      </p>\n      <p v-if=\"days.thursday != 0\">\n        Thursday: {{ days.thursday }} x {{ rate }} =\n        {{ days.thursday * rate }}\n      </p>\n      <p v-if=\"days.friday != 0\">\n        Friday: {{ days.friday }} x {{ rate }} = {{ days.friday * rate }}\n      </p>\n      <p v-if=\"days.saturday != 0\">\n        Saturday: {{ days.saturday }} x {{ rate }} =\n        {{ days.saturday * rate }}\n      </p>\n      <p>\n        Total:\n        {{\n          days.sunday * rate +\n          days.monday * rate +\n          days.tuesday * rate +\n          days.wednesday * rate +\n          days.thursday * rate +\n          days.friday * rate +\n          days.saturday * rate\n        }}\n      </p>\n    </v-sheet>\n    <v-sheet>\n      <v-toolbar dense dark color=\"primary\">\n        <v-toolbar-title> Cleaning Hours PT </v-toolbar-title>\n      </v-toolbar>\n\n      <v-date-picker\n        v-model=\"ptDates\"\n        multiple\n        elevation=\"5\"\n        no-title\n        @input=\"updatePTDates\"\n        :picker-date.sync=\"ptMonthChange\"\n      >\n      </v-date-picker>\n      <p v-if=\"ptDays.sunday != 0\">\n        Sunday: {{ ptDays.sunday }} x {{ ptRate }} =\n        {{ ptDays.sunday * ptRate }}\n      </p>\n      <p v-if=\"ptDays.monday != 0\">\n        Monday: {{ ptDays.monday }} x {{ ptRate }} =\n        {{ ptDays.monday * ptRate }}\n      </p>\n      <p v-if=\"ptDays.tuesday != 0\">\n        Tuesday: {{ ptDays.tuesday }} x {{ ptRate }} =\n        {{ ptDays.tuesday * ptRate }}\n      </p>\n      <p v-if=\"ptDays.wednesday != 0\">\n        Wednesday: {{ ptDays.wednesday }} x {{ ptRate }} =\n        {{ ptDays.wednesday * ptRate }}\n      </p>\n      <p v-if=\"ptDays.thursday != 0\">\n        Thursday: {{ ptDays.thursday }} x {{ ptRate }} =\n        {{ ptDays.thursday * ptRate }}\n      </p>\n      <p v-if=\"ptDays.friday != 0\">\n        Friday: {{ ptDays.friday }} x {{ ptRate }} =\n        {{ ptDays.friday * ptRate }}\n      </p>\n      <p v-if=\"ptDays.saturday != 0\">\n        Saturday: {{ ptDays.saturday }} x {{ ptRate }} =\n        {{ ptDays.saturday * ptRate }}\n      </p>\n      <p>\n        Total:\n        {{\n          ptDays.sunday * ptRate +\n          ptDays.monday * ptRate +\n          ptDays.tuesday * ptRate +\n          ptDays.wednesday * ptRate +\n          ptDays.thursday * ptRate +\n          ptDays.friday * ptRate +\n          ptDays.saturday * ptRate\n        }}\n      </p>\n    </v-sheet>\n  </v-container>\n</template>\n\n<script>\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nexport default {\n  data: () => ({\n    baseUrl: \"http://192.168.86.220:3000/timesheet\",\n\n    monthChange: null,\n    month: \"\",\n    dates: [\"\"],\n    days: {\n      sunday: 0,\n      monday: 0,\n      tuesday: 0,\n      wednesday: 0,\n      thursday: 0,\n      friday: 0,\n      saturday: 0,\n    },\n    rate: 100,\n    monthObject: null,\n\n    ptMonthChange: null,\n    ptMonth: \"\",\n    ptDates: [\"\"],\n    ptDays: {\n      sunday: 0,\n      monday: 0,\n      tuesday: 0,\n      wednesday: 0,\n      thursday: 0,\n      friday: 0,\n      saturday: 0,\n    },\n    ptRate: 50,\n    ptMonthObject: null,\n  }),\n  watch: {\n    /**\n     * Cleaning Hours month change\n     */\n    monthChange(yearMonth) {\n      this.month = yearMonth;\n      this.getTimesheet(\"reg\", yearMonth);\n    },\n    /**\n     * Cleaning Hours PT month change\n     */\n    ptMonthChange(yearMonth) {\n      this.ptMonth = yearMonth;\n      this.getTimesheet(\"pt\", yearMonth);\n    },\n  },\n  methods: {\n    getTimesheet(type, month) {\n      axios.get(`${this.baseUrl}/${type}/${month}`).then((res) => {\n        if (res.data.length != 0) {\n          if (type === \"reg\") {\n            this.monthObject = res.data[0];\n          } else {\n            this.ptMonthObject = res.data[0];\n          }\n        } else {\n          if (type === \"reg\") {\n            this.dates = [\"\"];\n            this.prepDays();\n            this.monthObject = null;\n          } else {\n            this.ptDates = [\"\"];\n            this.prepPTDays();\n            this.ptMonthObject = null;\n          }\n        }\n        if (this.monthObject && type === \"reg\") {\n          this.month = this.monthObject.yearMonth;\n          this.dates = this.monthObject.dates;\n          this.days = this.monthObject.days;\n        }\n        if (this.ptMonthObject && type === \"pt\") {\n          this.ptMonth = this.ptMonthObject.yearMonth;\n          this.ptDates = this.ptMonthObject.dates;\n          this.ptDays = this.ptMonthObject.days;\n        }\n      });\n    },\n    createTimesheet(type, month) {\n      let dates;\n      let days;\n      if (type === \"reg\") {\n        dates = this.dates;\n        days = this.days;\n      } else {\n        dates = this.ptDates;\n        days = this.ptDays;\n      }\n\n      axios\n        .post(this.baseUrl, {\n          name: type,\n          yearMonth: month,\n          dates: dates,\n          days: days,\n        })\n        .then((res) => {\n          if (type === \"reg\") {\n            this.monthObject = res.data;\n            this.month = this.monthObject.yearMonth;\n            this.dates = this.monthObject.dates;\n            this.days = this.monthObject.days;\n          } else {\n            this.ptMonthObject = res.data;\n            this.ptMonth = this.ptMonthObject.yearMonth;\n            this.ptDates = this.ptMonthObject.dates;\n            this.ptDays = this.ptMonthObject.days;\n          }\n        });\n    },\n    updateTimesheet(type, month) {\n      let dates;\n      let days;\n      if (type === \"reg\") {\n        dates = this.dates;\n        days = this.days;\n      } else {\n        dates = this.ptDates;\n        days = this.ptDays;\n      }\n\n      axios\n        .patch(`${this.baseUrl}/${type}/${month}`, {\n          name: type,\n          yearMonth: month,\n          dates: dates,\n          days: days,\n        })\n        .then((res) => {\n          if (type === \"reg\") {\n            this.monthObject = res.data;\n            this.month = this.monthObject.yearMonth;\n            this.dates = this.monthObject.dates;\n            this.days = this.monthObject.days;\n          } else {\n            this.ptMonthObject = res.data;\n            this.ptMonth = this.ptMonthObject.yearMonth;\n            this.ptDates = this.ptMonthObject.dates;\n            this.ptDays = this.ptMonthObject.days;\n          }\n        });\n    },\n    /**\n     * Regular days methods\n     */\n    updateDates(dates) {\n      this.prepDays();\n      this.countDays(dates);\n\n      // if we have data, then call patch\n      if (this.monthObject) {\n        this.updateTimesheet(\"reg\", this.month);\n      } else {\n        // if not then post\n        this.createTimesheet(\"reg\", this.month);\n      }\n    },\n    prepDays() {\n      this.days = {\n        sunday: 0,\n        monday: 0,\n        tuesday: 0,\n        wednesday: 0,\n        thursday: 0,\n        friday: 0,\n        saturday: 0,\n      };\n    },\n    countDays(dates) {\n      dates.forEach((date) => {\n        if (date != \"\") {\n          let day = moment(date).format(\"dddd\");\n          this.addToDays(day);\n        }\n      });\n    },\n    addToDays(day) {\n      switch (day) {\n        case \"Sunday\":\n          this.days.sunday += 1;\n          break;\n        case \"Monday\":\n          this.days.monday += 1;\n          break;\n        case \"Tuesday\":\n          this.days.tuesday += 1;\n          break;\n        case \"Wednesday\":\n          this.days.wednesday += 1;\n          break;\n        case \"Thursday\":\n          this.days.thursday += 1;\n          break;\n        case \"Friday\":\n          this.days.friday += 1;\n          break;\n        case \"Saturday\":\n          this.days.saturday += 1;\n          break;\n        default:\n          break;\n      }\n    },\n    /**\n     * PT days methods\n     */\n    updatePTDates(dates) {\n      this.prepPTDays();\n      this.countPTDays(dates);\n\n      // if we have data, then call patch\n      if (this.ptMonthObject) {\n        this.updateTimesheet(\"pt\", this.ptMonth);\n      } else {\n        // if not then post\n        this.createTimesheet(\"pt\", this.ptMonth);\n      }\n    },\n    prepPTDays() {\n      this.ptDays = {\n        sunday: 0,\n        monday: 0,\n        tuesday: 0,\n        wednesday: 0,\n        thursday: 0,\n        friday: 0,\n        saturday: 0,\n      };\n    },\n    countPTDays(dates) {\n      dates.forEach((date) => {\n        if (date != \"\") {\n          let day = moment(date).format(\"dddd\");\n          this.addToPTDays(day);\n        }\n      });\n    },\n    addToPTDays(day) {\n      switch (day) {\n        case \"Sunday\":\n          this.ptDays.sunday += 1;\n          break;\n        case \"Monday\":\n          this.ptDays.monday += 1;\n          break;\n        case \"Tuesday\":\n          this.ptDays.tuesday += 1;\n          break;\n        case \"Wednesday\":\n          this.ptDays.wednesday += 1;\n          break;\n        case \"Thursday\":\n          this.ptDays.thursday += 1;\n          break;\n        case \"Friday\":\n          this.ptDays.friday += 1;\n          break;\n        case \"Saturday\":\n          this.ptDays.saturday += 1;\n          break;\n        default:\n          break;\n      }\n    },\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module"}